
//(function () {

 class Classe {//para implementar a classe
    constructor(n,c) {
      this.nome = n;
      this.codigo = c;
    }
    avalie(map) {
      map[this.nome] = 
        this.codigo.avalie(map);
    }
  }

  class metodo {//para implementar o metodo
     constructor(n,p1,p2,c2) {
      this.nome = n;
      this.parametro1 = p1;
      this.parametro2 = p2;
      this.codigo = c;
    }
    avalie(map) {//descobrir como ligar os parâmetros com o código
      map[this.nome] = 
        this.codigo.avalie(map);
    }
  }
  class Atrib {
    constructor(n,e) {
      this.nome = n;
      this.exp = e;
    }
    avalie(map) {
      map[this.nome] = 
        this.exp.avalie(map);
    }
  }

  class Num {
    constructor(v) {  
      this.val = v;
    }
    avalie(map) {
       return this.val;
    }
  }

  class Id {
    constructor(n) {  
      this.nome = n;
    }
    avalie(map) {
       return map[this.nome];
    }
  }


  class Op {
    constructor(op,esq,dir) {
      this.op = op;
      this.esq = esq;
      this.dir = dir;
    }
    avalie(map) {
      var v1 = this.esq.avalie(map);
      var v2 = this.dir.avalie(map);
      switch (this.op) {
        case '+': return v1+v2;
        case '*': return v1*v2;
        case '-': return v1-v2;
        case '>': return v1>v2;
        case '<': return v1<v2;
        case '<=': return v1<=v2;
        case '>=': return v1>=v2;
        case '==': return v1==v2;
        case '!=': return v1!=v2;
       case 'and': return v1 && v2;
       case 'or': return v1 || v2; 
      }
    }
  }

  class Print {
    constructor(str) {
      this.str = str;
    }
    gereCodigo(map) {
      return "print"+"(\""+str+"\")"
    }

  }

  class Type {
    /* declarando o tipo da variável de uma forma um pouco diferente apenas com seu nome e tipo, diferente de python que precisaria de duas linhas*/
    constructor(n,tp) {
      this.tp = tp;
      this.n = n;
    }
  
    avalie(map) {
      var n = this.n;
      switch (this.tp) {
        case 'str': return "str n"; 
        case 'list': return "list n";  
        case 'int': return "int n"; 
        case 'bool': return "bool n"; 
      }
       
    }
  }

  class Compare {//para o if else
    constructor(cond,exp1,exp2) {
      this.cond = cond;
      this.exp1 = exp1;
      this.exp2 = exp2;
    }

    avalie(map) {
      var exp1 = this.exp1
      var exp2 = this.exp2
      switch (this.cond) {
        case 'True': return exp1;
        case 'False' : return exp2;
      }
    }
  }
  
  
  module.exports = {Print,Atrib,Num,Op,Id};

//}());