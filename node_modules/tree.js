
//(function () {

 class Classe {//para implementar a classe
    constructor(n,c) {
      this.nome = n;
      this.codigo = c;
    }
    geraCodigo() {
      return "Class "+this.nome+ "{"+ this.codigo.geraCodigo() + "}";
    }
  }

  class Metodo {//para implementar o metodo
     constructor(n,p1,p2,c2) {
      this.nome = n;
      this.parametro1 = p1;
      this.parametro2 = p2;
      this.codigo = c2;
    }
    geraCodigo() {
      var codigo = this.codigo
      return "def "+ this.nome + "("+this.parametro1+","+ this.parametro2+")"+"{"+ codigo.geraCodigo()+"}";
    }
  }
  class Atrib {
    constructor(n,e) {
      this.nome = n;
      this.exp = e;
    }
    geraCodigo(){
      return this.nome+"= "+this.exp.geraCodigo();
    }
  }
  

  class Num {
    constructor(v) {  
      this.val = v;
    }
    geraCodigo(){
      return this.val
    }
  }

  class Id {
    constructor(n) {  
      this.nome = n;
    }
    geraCodigo(){
      return this.nome
    }
  }


  class Op {
    constructor(op,esq,dir) {
      this.op = op;
      this.esq = esq;
      this.dir = dir;
    }
    geraCodigo(){
      var v1 = this.esq;
      var v2 = this.dir;
       switch (this.op) {
        case '+': return v1.geraCodigo()+"+"+v2.geraCodigo();
        case '*': return v1.geraCodigo()+"*"+v2.geraCodigo();
        case '-': return v1.geraCodigo()+"-"+v2.geraCodigo();
        case '>': return v1.geraCodigo()+">"+v2.geraCodigo();
        case '<': return v1.geraCodigo()+"<"+v2.geraCodigo();
        case '<=': return v1.geraCodigo()+"<="+v2.geraCodigo();
        case '>=': return v1.geraCodigo()+">="+v2.geraCodigo();
        case '==': return v1.geraCodigo()+"=="+v2.geraCodigo();
        case '!=': return v1.geraCodigo()+"!="+v2.geraCodigo();
       case 'and': return v1.geraCodigo()+" && "+v2.geraCodigo();
       case 'or': return v1.geraCodigo()+" || "+v2.geraCodigo(); 
      }
    }
  }

  class Print {
    constructor(str) {
      this.str = str;
    }
    geraCodigo() {
      return 'print' + '("'+ this.str +'")';
    }
  }

class Error {
    constructor(str) {
      this.str = str;
    }
    geraCodigo() {
      return 'raise IOError' + '("'+ this.str +'")';
    }
}

class Excecao {
    constructor(str) {
      this.str = str;
    }
    geraCodigo() {
      return 'try:' + "{" + this.str + "}"+ "\n" + "{" + "exception ErrorName as err:" + "}" + "\n" + "print (err)";
    }
  }

class RI {
    constructor(vari,tipo,str,tipoAntigo) {
      this.vari = vari;
      this.str = str;
      this.tipo = tipo;
      this.tipoAntigo = tipoAntigo;
    }
    geraCodigo() {
      return this.vari + "=" + this.tipo + "("+ "input" + "(" + this.str + ")" + ")";
    }
  }

  class Type {
    /* declarando o tipo da vari√°vel de uma forma um pouco diferente apenas com seu nome e tipo, diferente de python que precisaria de duas linhas*/
    constructor(n,tp) {
      this.tp = tp;
      this.n = n;
    }
  
    geraCodigo() {
      var n = this.n;
      switch (this.tp) {
        case 'str': return "str "+n ; 
        case 'list': return "list"+n;  
        case 'int': return "int"+n; 
        case 'bool': return "bool"+n; 
      }
       
    }
  }

  class ComparaIf {//para o if
    constructor(cond,exp1) {
      this.cond = cond;
      this.exp1 = exp1;
    }

    geraCodigo(){
      var cond = this.cond;
      var exp = this.exp1
      return "if"+cond.geraCodigo()+"{"+exp.geraCodigo()+"}"
    }
  }

    class ComparaIfElse {//para o if else
    constructor(cond,exp1,exp2) {
      this.cond = cond;
      this.exp1 = exp1;
      this.exp2 = exp2
    }

    geraCodigo(){
      return "if"+this.cond+"{"+this.exp1+"}"+"else"+"{"+this.exp2+"}"
    }
  }
  
  
  module.exports = {Classe,Metodo,Print,Atrib,Num,Op,Id,Error,Excecao,RI,ComparaIf,ComparaIfElse};

//}());